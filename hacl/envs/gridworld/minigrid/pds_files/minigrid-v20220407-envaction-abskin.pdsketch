(define
(domain minigrid-v20220407-envaction-robokin)
(:requirements :pdsketch-v2-1)

(:types
    robot item - object
    pose - vector[float32, 2]
    direction - vector[int64, 1]
)

(:predicates
    (robot-pose [return_type=pose, group="augmented"] ?r - robot)
    (robot-direction [return_type=direction] ?r - robot)
    (item-pose [return_type=pose, group="augmented"] ?o - item)

    (direction-left [return_type=direction] ?d - direction)
    (direction-right [return_type=direction] ?d - direction)
)

(:feature item-image [group="augmented-input"]
    :parameters (?o - item)
    :output (vector[float32, 3])
)
(:feature item-feature [group="augmented"]
    :parameters (?o - item)
    :output (vector[float32, 64])
    :expr (??f (item-image ?o))
)

(:derived (direction-feature [return_type=vector[float32, 16]] ?d - direction)
    (??f ?d)
)
(:derived (robot-direction-feature [return_type=vector[float32, 16]] ?r - robot)
    (direction-feature (robot-direction ?r))
)
(:derived (is-facing ?p - pose ?d - direction ?t - pose)
    (??f ?p (direction-feature ?d) ?t)
)
(:derived (robot-is-facing [group="goal"] ?r - robot ?o - item)
    (is-facing (robot-pose ?r) (robot-direction ?r) (item-pose ?o))
)
(:derived (robot-holding [group="goal"] ?r - robot ?o - item)
    (??f (robot-pose ?r) (robot-direction-feature ?r) (item-pose ?o) (item-feature ?o))
)

(:derived (is-red    [group="goal"] ?o - item) (??f (item-feature ?o)))
(:derived (is-green  [group="goal"] ?o - item) (??f (item-feature ?o)))
(:derived (is-blue   [group="goal"] ?o - item) (??f (item-feature ?o)))
(:derived (is-purple [group="goal"] ?o - item) (??f (item-feature ?o)))
(:derived (is-yellow [group="goal"] ?o - item) (??f (item-feature ?o)))
(:derived (is-grey   [group="goal"] ?o - item) (??f (item-feature ?o)))
(:derived (is-key    [group="goal"] ?o - item) (??f (item-feature ?o)))
(:derived (is-ball   [group="goal"] ?o - item) (??f (item-feature ?o)))
(:derived (is-box    [group="goal"] ?o - item) (??f (item-feature ?o)))
(:derived (is-door   [group="goal"] ?o - item) (??f (item-feature ?o)))
(:derived (is-open   [group="goal"] ?o - item) (??f (item-feature ?o)))

(:action forward
    :parameters (?r - robot)
    :precondition (and )
    :effect (and (robot-pose::cond-assign ?r
        (??f
            (robot-pose ?r) (robot-direction-feature ?r)
            (foreach (?o - item)
                (item-feature::cond-select ?o (robot-is-facing ?r ?o))
            )
        )
        (??g (robot-pose ?r) (robot-direction-feature ?r))
    ))
)
(:action lturn
    :parameters (?r - robot)
    :precondition (and )
    :effect (and (robot-direction::assign ?r (direction-left (robot-direction ?r))) )
)
(:action rturn
    :parameters (?r - robot)
    :precondition (and )
    :effect (and (robot-direction::assign ?r (direction-right (robot-direction ?r))) )
)
(:action pickup
    :parameters (?r - robot)
    :precondition (and )
    :effect (and
        (foreach (?o - item)
            (item-pose::cond-assign ?o
                (robot-is-facing ?r ?o)
                (??f (robot-pose ?r) (robot-direction-feature ?r) (item-pose ?o) (item-feature ?o) )
            )
        )
    )
)
)
